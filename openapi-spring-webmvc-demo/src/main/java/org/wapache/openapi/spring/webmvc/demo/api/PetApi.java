/*
 *
 *  * Copyright 2019-2020 the original author or authors.
 *  *
 *  * Licensed under the Apache License, Version 2.0 (the "License");
 *  * you may not use this file except in compliance with the License.
 *  * You may obtain a copy of the License at
 *  *
 *  *      https://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software
 *  * distributed under the License is distributed on an "AS IS" BASIS,
 *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  * See the License for the specific language governing permissions and
 *  * limitations under the License.
 *
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.wapache.openapi.spring.webmvc.demo.api;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.wapache.openapi.spring.webmvc.demo.model.ModelApiResponse;
import org.wapache.openapi.spring.webmvc.demo.model.Pet;
import org.wapache.openapi.v3.annotations.Operation;
import org.wapache.openapi.v3.annotations.Parameter;
import org.wapache.openapi.v3.annotations.enums.Explode;
import org.wapache.openapi.v3.annotations.enums.ParameterIn;
import org.wapache.openapi.v3.annotations.enums.ParameterStyle;
import org.wapache.openapi.v3.annotations.enums.SecuritySchemeType;
import org.wapache.openapi.v3.annotations.media.ArraySchema;
import org.wapache.openapi.v3.annotations.media.Content;
import org.wapache.openapi.v3.annotations.media.Schema;
import org.wapache.openapi.v3.annotations.parameters.ApiRequestBody;
import org.wapache.openapi.v3.annotations.responses.ApiResponse;
import org.wapache.openapi.v3.annotations.responses.ApiResponses;
import org.wapache.openapi.v3.annotations.security.OAuthFlow;
import org.wapache.openapi.v3.annotations.security.OAuthFlows;
import org.wapache.openapi.v3.annotations.security.OAuthScope;
import org.wapache.openapi.v3.annotations.security.SecurityRequirement;
import org.wapache.openapi.v3.annotations.security.SecurityScheme;
import org.wapache.openapi.v3.annotations.tags.Tag;

import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

@SecurityScheme(
	name = "petstore_auth",
	type = SecuritySchemeType.OAUTH2,
	flows = @OAuthFlows(
		implicit = @OAuthFlow(
			authorizationUrl = "https://petstore3.swagger.io/oauth/authorize",
			scopes = {
				@OAuthScope(name = "write:pets", description = "修改你的宠物"),
				@OAuthScope(name = "read:pets", description = "读取你的宠物列表")
})))
@Tag(name = "pet", description = "宠物接口")
public interface PetApi {

	default PetApiDelegate getDelegate() {
		return new PetApiDelegate() {
		};
	}

	@Operation(
		summary = "添加一只宠物到宠物商店",
		description = "添加一只宠物到宠物商店",
		security = {
			@SecurityRequirement(name = "petstore_auth", scopes = { "write:pets", "read:pets" })
		},
		tags = { "pet" }
	)
	@ApiResponses(value = {
		@ApiResponse(responseCode = "200", description = "操作成功", content = {
			@Content(mediaType = "application/xml", schema = @Schema(implementation = Pet.class)),
			@Content(mediaType = "application/json", schema = @Schema(implementation = Pet.class))
		}),
		@ApiResponse(responseCode = "405", description = "非法的输入")
	})
	@PostMapping(value = "/pet", consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" })
	default void addPet(
		@Parameter(description = "宠物信息", required = true) @Valid @RequestBody Pet pet
	) {
		// return getDelegate().addPet(pet);
	}

	@Operation(
		summary = "删除一只宠物",
		description = "",
		security = {
			@SecurityRequirement(name = "petstore_auth", scopes = { "write:pets", "read:pets" })
		},
		tags = { "pet" }
	)
	@ApiResponses(value = {
		@ApiResponse(responseCode = "400", description = "非法的宠物ID")
	})
	@DeleteMapping(value = "/pet/{petId}")
	default ResponseEntity<Void> deletePet(
		@Parameter(description = "宠物ID", required = true)
		@PathVariable("petId")
		Long petId,
		@Parameter(description = "")
		@RequestHeader(value = "api_key", required = false)
		String apiKey
	) {
		return getDelegate().deletePet(petId, apiKey);
	}

	@Operation(
		summary = "根据状态查找宠物",
		description = "",
		security = {
			@SecurityRequirement(name = "petstore_auth", scopes = { "write:pets", "read:pets" })
		},
		tags = { "pet" }
	)
	@ApiResponses(value = {
		@ApiResponse(responseCode = "200", description = "操作成功",
			content = @Content(array = @ArraySchema(schema = @Schema(implementation = Pet.class)))),
		@ApiResponse(responseCode = "400", description = "非法的宠物状态值")
	})
	@GetMapping(value = "/pet/findByStatus", produces = { "application/xml", "application/json" })
	default ResponseEntity<List<Pet>> findPetsByStatus(
		@Parameter(
			explode = Explode.TRUE,
			name = "status",
			in = ParameterIn.QUERY,
			description = "多个状态可以用逗号分隔",
			style = ParameterStyle.FORM,
			schema = @Schema(
				type = "string",
				defaultValue = "available",
				allowableValues = { "available", "pending", "sold" }
			)
		)
		@Valid
		@RequestParam(value = "status", required = false)
		List<String> status
	) {
		return getDelegate().findPetsByStatus(status);
	}

	@Operation(summary = "根据标签查找宠物", description = "", security = {
			@SecurityRequirement(name = "petstore_auth", scopes = { "write:pets", "read:pets" }) }, tags = { "pet" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "操作成功", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Pet.class)))),
			@ApiResponse(responseCode = "400", description = "Invalid tag value", content = @Content) })
	@GetMapping(value = "/pet/findByTags", produces = { "application/xml", "application/json" })
	default ResponseEntity<List<Pet>> findPetsByTags(
			@Parameter(description = "多个tag用逗号分隔, 譬如tag1, tag2, tag3", explode = Explode.TRUE, in = ParameterIn.QUERY, name = "tags", style = ParameterStyle.FORM)
			@Valid @RequestParam(value = "tags", required = false)
			List<String> tags) {
		return getDelegate().findPetsByTags(tags);
	}

	@Operation(summary = "根据ID获取宠物信息", description = "返回宠物信息", security = {
			@SecurityRequirement(name = "api_key"),
			@SecurityRequirement(name = "petstore_auth", scopes = { "write:pets", "read:pets" })
	}, tags = { "pet" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "操作成功", content = @Content(schema = @Schema(implementation = Pet.class))),
			@ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = @Content),
			@ApiResponse(responseCode = "404", description = "找不到该宠物", content = @Content) })
	@GetMapping(value = "/pet/{petId}", produces = { "application/xml", "application/json" })
	default ResponseEntity<Pet> getPetById(
			@Parameter(description = "宠物ID", required = true) @PathVariable("petId") Long petId) {
		return getDelegate().getPetById(petId);
	}

	@Operation(
		summary = "修改宠物信息",
		description = "",
		operationId = "updatePet",
		security = {
			@SecurityRequirement(name = "petstore_auth", scopes = { "write:pets", "read:pets" })
		},
		tags = { "pet" }
	)
	@ApiResponses(value = {
		@ApiResponse(responseCode = "200", description = "操作成功",
			content = {
				@Content(mediaType = "application/xml", schema = @Schema(implementation = Pet.class)),
				@Content(mediaType = "application/json", schema = @Schema(implementation = Pet.class))
			}
		),
		@ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
		@ApiResponse(responseCode = "404", description = "Pet not found"),
		@ApiResponse(responseCode = "405", description = "Validation exception")
	})
	@PutMapping(value = "/pet", consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" })
	default ResponseEntity<Void> updatePet(
			@Parameter(description = "宠物信息", required = true) @Valid @RequestBody Pet pet) {
		return getDelegate().updatePet(pet);
	}

	@Operation(
		summary = "修改宠物信息(form表单形式)",
		description = "",
		security = {
			@SecurityRequirement(name = "petstore_auth", scopes = { "write:pets", "read:pets" })
		},
		tags = { "pet" }
	)
	@ApiResponses(value = { @ApiResponse(responseCode = "405", description = "非法的输入") })
	@PostMapping(value = "/pet/{petId}", consumes = { "application/x-www-form-urlencoded" })
	default ResponseEntity<Void> updatePetWithForm(
			@Parameter(description = "宠物ID", required = true) @PathVariable("petId") Long petId,
			@Parameter(description = "宠物名称") @RequestParam(value = "name", required = false) String name,
			@Parameter(description = "宠物状态") @RequestParam(value = "status", required = false) String status) {
		return getDelegate().updatePetWithForm(petId, name, status);
	}

	@Operation(summary = "上传图片", security = {
			@SecurityRequirement(name = "petstore_auth", scopes = { "write:pets", "read:pets" }) }, tags = { "pet" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "操作成功", content = @Content(schema = @Schema(implementation = ModelApiResponse.class))) })
	@PostMapping(value = "/pet/{petId}/uploadImage", produces = { "application/json" }, consumes = { "application/octet-stream" })
	default ResponseEntity<ModelApiResponse> uploadFile(
			@Parameter(description = "宠物ID", required = true) @PathVariable("petId") Long petId,
			@Parameter(description = "宠物扩展数据") @RequestParam(value = "additionalMetadata", required = false) String additionalMetadata,
			@ApiRequestBody(content = @Content(mediaType = "application/octet-stream", schema = @Schema(type = "string", format = "binary")))
			@Valid @RequestPart("file") MultipartFile file) {
		return getDelegate().uploadFile(petId, additionalMetadata, file);
	}

	@Operation(summary = "分页查询宠物", description = "", security = {
			@SecurityRequirement(name = "petstore_auth", scopes = { "write:pets", "read:pets" }) }, tags = { "pet" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "操作成功", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Pet.class))))
	})
	@GetMapping(value = "/pet", produces = { "application/xml", "application/json" })
	default ResponseEntity<List<Pet>> getAllPets(@NotNull Pageable pageable) {
		return getDelegate().getAllPets(pageable);
	}

}
